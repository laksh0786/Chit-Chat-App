// Desc: Custom hook to handle async mutations in Redux Toolkit Query

import { useState } from "react";
import toast from "react-hot-toast";


const useAsyncMutation = (mutationHook) => {

    const [isloading, setIsLoading] = useState(false);
    const [data, setData] = useState(null);

    //getting the trigger function from the mutation hook generated by RTK Query
    const [mutate] = mutationHook();

    const executeMutationHandler = async (toastMessage, ...args) => {

        setIsLoading(true);

        const toastId = toast.loading(toastMessage || "Please wait while we are processing your request....");

        try {

            const res = await mutate(...args);

            if (res?.data) {
                setData(res.data);
                toast.success(res?.data?.message || "Request processed successfully", {
                    id: toastId
                }); //dismiss the loading toast and show success toast
            }
            else {

                toast.error(res?.error?.data?.message || "Failed to process your request", {
                    id: toastId
                }); //dismiss the loading toast and show error toast
                
            }

        } catch (error) {

            // console.log(error);
            toast.error(error?.data?.message ||"Something went wrong...", {
                id: toastId
            })

        } finally {
            setIsLoading(false);
        }


    }

    return [executeMutationHandler, isloading, data];

}


export default useAsyncMutation;